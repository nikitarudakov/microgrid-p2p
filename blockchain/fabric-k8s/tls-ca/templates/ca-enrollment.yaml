apiVersion: batch/v1
kind: Job
metadata:
  name: tls-ca-enrollment
  namespace: {{ .Values.namespace }}
spec:
  backoffLimit: 3
  template:
    spec:
      containers:
        - name: tls-ca-enrollment
          image: {{ .Values.image }}
          env:
            - name: CA_HOST
              value: {{ .Values.name }}.{{ .Values.namespace}}.svc.cluster.local:7054
            - name: FABRIC_CA_CLIENT_HOME
              value: /etc/hyperledger/fabric-ca-client
            - name: NODE_TLSDIR
              value: {{ .Values.namespace }}/{{ .Values.node.type}}s/{{ .Values.node.name }}/tls
          args:
            - sh
            - -c
            - |
              sleep 10

              mkdir -p /etc/hyperledger/fabric-ca-client/tls-root-cert
              cp /etc/hyperledger/fabric-ca-server/ca-cert.pem /etc/hyperledger/fabric-ca-client/tls-root-cert/tls-ca-cert.pem

              fabric-ca-client enroll \
                -u https://{{ .Values.admin.user }}:{{ .Values.admin.pass }}@${CA_HOST} \
                --tls.certfiles tls-root-cert/tls-ca-cert.pem \
                --enrollment.profile tls \
                --mspdir tls-ca/tlsadmin/msp \
                -d
              echo "TLS Admin was enrolled"

              fabric-ca-client register \
                --id.name {{ .Values.org.boot.name }} \
                --id.secret {{ .Values.org.boot.secret }} \
                -u https://${CA_HOST} \
                --tls.certfiles tls-root-cert/tls-ca-cert.pem \
                --mspdir tls-ca/tlsadmin/msp \
                -d
              echo "Org CA Bootstrap identity was registered"

              fabric-ca-client enroll \
                -u https://{{ .Values.org.boot.name }}:{{ .Values.org.boot.secret }}@${CA_HOST} \
                --tls.certfiles tls-root-cert/tls-ca-cert.pem \
                --enrollment.profile tls \
                --csr.hosts *.{{ .Values.namespace }}.svc.cluster.local,localhost \
                --mspdir tls-ca/{{ .Values.org.boot.name }}/msp \
                -d
              echo "Root Org CA identity was registered"

              # Rename private key for easier reference in CA server
              KEY_PATH="/etc/hyperledger/fabric-ca-client/tls-ca/{{ .Values.org.boot.name }}/msp/keystore"
              mv ${KEY_PATH}/* ${KEY_PATH}/key.pem
              echo "Renamed TLS private key and certificate for Org CA server"

              echo "ðŸ“Œ Registering node with TLS CA..."

              fabric-ca-client register \
                --id.name {{ .Values.node.name }} \
                --id.secret {{ .Values.node.secret }} \
                --id.type {{ .Values.node.type }} \
                -u https://${CA_HOST} \
                --mspdir tls-ca/tlsadmin/msp \
                --tls.certfiles tls-root-cert/tls-ca-cert.pem \
                -d

              echo "âœ… Node '{{ .Values.node.name }}' registered with TLS CA"

              fabric-ca-client enroll \
                -u https://{{ .Values.node.name }}:{{ .Values.node.secret }}@${CA_HOST} \
                --enrollment.profile tls \
                --csr.hosts {{ .Values.node.name }}.{{ .Values.namespace }}.svc.cluster.local,localhost \
                --tls.certfiles tls-root-cert/tls-ca-cert.pem \
                --mspdir ${NODE_TLSDIR} \
                -d

              echo "âœ… TLS enrollment complete for '{{ .Values.node.name }}'"

              # Rename for easier use later
              KEY_PATH="/etc/hyperledger/fabric-ca-client/${NODE_TLSDIR}"
              mv ${KEY_PATH}/keystore/* ${KEY_PATH}/server.key
              mv ${KEY_PATH}/signcerts/cert.pem ${KEY_PATH}/server.crt
              cp ${FABRIC_CA_CLIENT_HOME}/tls-root-cert/tls-ca-cert.pem ${KEY_PATH}/ca.crt

              echo "âœ… TLS files: key, cert, and CA copied"
          volumeMounts:
            - mountPath: /etc/hyperledger/fabric-ca-server
              name: ca-server-root
            - mountPath: /etc/hyperledger/fabric-ca-client
              name: ca-client-data
      restartPolicy: Never
      volumes:
        - name: ca-server-root
          persistentVolumeClaim:
            claimName: {{ .Values.name }}-server-pvc
        - name: ca-client-data
          persistentVolumeClaim:
            claimName: {{ .Values.name }}-client-pvc