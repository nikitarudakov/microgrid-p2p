package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/nikitarudakov/microenergy/api/model"
	"github.com/nikitarudakov/microenergy/api/runtime"
	"google.golang.org/protobuf/types/known/wrapperspb"
)

// RegisterEnergyResource is the resolver for the registerEnergyResource field.
func (r *mutationResolver) RegisterEnergyResource(ctx context.Context, ownerName string, capacity float64) (*model.EnergyResource, error) {
	panic(fmt.Errorf("not implemented: RegisterEnergyResource - registerEnergyResource"))
}

// EnergyResources is the resolver for the energy_resources field.
func (r *queryResolver) EnergyResources(ctx context.Context, ownerName string) ([]*model.EnergyResource, error) {
	response, err := r.inventoryManagementService.GetOwnerEnergyResourceList(
		ctx,
		&wrapperspb.StringValue{Value: ownerName},
	)
	if err != nil {
		return nil, err
	}

	var output []*model.EnergyResource
	for _, er := range response.EnergyResources {
		output = append(output, fromProto(er, &model.EnergyResource{}))
	}

	return output, nil
}

// Mutation returns runtime.MutationResolver implementation.
func (r *Resolver) Mutation() runtime.MutationResolver { return &mutationResolver{r} }

// Query returns runtime.QueryResolver implementation.
func (r *Resolver) Query() runtime.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
