// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: competition.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompetitionManagement_RegisterCompetition_FullMethodName = "/pb.CompetitionManagement/RegisterCompetition"
)

// CompetitionManagementClient is the client API for CompetitionManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompetitionManagementClient interface {
	RegisterCompetition(ctx context.Context, in *Competition, opts ...grpc.CallOption) (*Competition, error)
}

type competitionManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewCompetitionManagementClient(cc grpc.ClientConnInterface) CompetitionManagementClient {
	return &competitionManagementClient{cc}
}

func (c *competitionManagementClient) RegisterCompetition(ctx context.Context, in *Competition, opts ...grpc.CallOption) (*Competition, error) {
	out := new(Competition)
	err := c.cc.Invoke(ctx, CompetitionManagement_RegisterCompetition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompetitionManagementServer is the server API for CompetitionManagement service.
// All implementations must embed UnimplementedCompetitionManagementServer
// for forward compatibility
type CompetitionManagementServer interface {
	RegisterCompetition(context.Context, *Competition) (*Competition, error)
	mustEmbedUnimplementedCompetitionManagementServer()
}

// UnimplementedCompetitionManagementServer must be embedded to have forward compatible implementations.
type UnimplementedCompetitionManagementServer struct {
}

func (UnimplementedCompetitionManagementServer) RegisterCompetition(context.Context, *Competition) (*Competition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCompetition not implemented")
}
func (UnimplementedCompetitionManagementServer) mustEmbedUnimplementedCompetitionManagementServer() {}

// UnsafeCompetitionManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompetitionManagementServer will
// result in compilation errors.
type UnsafeCompetitionManagementServer interface {
	mustEmbedUnimplementedCompetitionManagementServer()
}

func RegisterCompetitionManagementServer(s grpc.ServiceRegistrar, srv CompetitionManagementServer) {
	s.RegisterService(&CompetitionManagement_ServiceDesc, srv)
}

func _CompetitionManagement_RegisterCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Competition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionManagementServer).RegisterCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitionManagement_RegisterCompetition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionManagementServer).RegisterCompetition(ctx, req.(*Competition))
	}
	return interceptor(ctx, in, info, handler)
}

// CompetitionManagement_ServiceDesc is the grpc.ServiceDesc for CompetitionManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompetitionManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CompetitionManagement",
	HandlerType: (*CompetitionManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCompetition",
			Handler:    _CompetitionManagement_RegisterCompetition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "competition.proto",
}
