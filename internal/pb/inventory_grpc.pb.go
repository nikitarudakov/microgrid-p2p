// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: inventory.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InventoryManagement_RegisterEnergyResource_FullMethodName       = "/pb.InventoryManagement/RegisterEnergyResource"
	InventoryManagement_FetchAllEnergyResources_FullMethodName      = "/pb.InventoryManagement/FetchAllEnergyResources"
	InventoryManagement_FetchProducerEnergyResources_FullMethodName = "/pb.InventoryManagement/FetchProducerEnergyResources"
)

// InventoryManagementClient is the client API for InventoryManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryManagementClient interface {
	RegisterEnergyResource(ctx context.Context, in *RegisterEnergyResourceInput, opts ...grpc.CallOption) (*EnergyResource, error)
	FetchAllEnergyResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EnergyResourceList, error)
	FetchProducerEnergyResources(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*EnergyResourceList, error)
}

type inventoryManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryManagementClient(cc grpc.ClientConnInterface) InventoryManagementClient {
	return &inventoryManagementClient{cc}
}

func (c *inventoryManagementClient) RegisterEnergyResource(ctx context.Context, in *RegisterEnergyResourceInput, opts ...grpc.CallOption) (*EnergyResource, error) {
	out := new(EnergyResource)
	err := c.cc.Invoke(ctx, InventoryManagement_RegisterEnergyResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryManagementClient) FetchAllEnergyResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EnergyResourceList, error) {
	out := new(EnergyResourceList)
	err := c.cc.Invoke(ctx, InventoryManagement_FetchAllEnergyResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryManagementClient) FetchProducerEnergyResources(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*EnergyResourceList, error) {
	out := new(EnergyResourceList)
	err := c.cc.Invoke(ctx, InventoryManagement_FetchProducerEnergyResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryManagementServer is the server API for InventoryManagement service.
// All implementations must embed UnimplementedInventoryManagementServer
// for forward compatibility
type InventoryManagementServer interface {
	RegisterEnergyResource(context.Context, *RegisterEnergyResourceInput) (*EnergyResource, error)
	FetchAllEnergyResources(context.Context, *emptypb.Empty) (*EnergyResourceList, error)
	FetchProducerEnergyResources(context.Context, *wrapperspb.StringValue) (*EnergyResourceList, error)
	mustEmbedUnimplementedInventoryManagementServer()
}

// UnimplementedInventoryManagementServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryManagementServer struct {
}

func (UnimplementedInventoryManagementServer) RegisterEnergyResource(context.Context, *RegisterEnergyResourceInput) (*EnergyResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEnergyResource not implemented")
}
func (UnimplementedInventoryManagementServer) FetchAllEnergyResources(context.Context, *emptypb.Empty) (*EnergyResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllEnergyResources not implemented")
}
func (UnimplementedInventoryManagementServer) FetchProducerEnergyResources(context.Context, *wrapperspb.StringValue) (*EnergyResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProducerEnergyResources not implemented")
}
func (UnimplementedInventoryManagementServer) mustEmbedUnimplementedInventoryManagementServer() {}

// UnsafeInventoryManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryManagementServer will
// result in compilation errors.
type UnsafeInventoryManagementServer interface {
	mustEmbedUnimplementedInventoryManagementServer()
}

func RegisterInventoryManagementServer(s grpc.ServiceRegistrar, srv InventoryManagementServer) {
	s.RegisterService(&InventoryManagement_ServiceDesc, srv)
}

func _InventoryManagement_RegisterEnergyResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEnergyResourceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryManagementServer).RegisterEnergyResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryManagement_RegisterEnergyResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryManagementServer).RegisterEnergyResource(ctx, req.(*RegisterEnergyResourceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryManagement_FetchAllEnergyResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryManagementServer).FetchAllEnergyResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryManagement_FetchAllEnergyResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryManagementServer).FetchAllEnergyResources(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryManagement_FetchProducerEnergyResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryManagementServer).FetchProducerEnergyResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryManagement_FetchProducerEnergyResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryManagementServer).FetchProducerEnergyResources(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryManagement_ServiceDesc is the grpc.ServiceDesc for InventoryManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.InventoryManagement",
	HandlerType: (*InventoryManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEnergyResource",
			Handler:    _InventoryManagement_RegisterEnergyResource_Handler,
		},
		{
			MethodName: "FetchAllEnergyResources",
			Handler:    _InventoryManagement_FetchAllEnergyResources_Handler,
		},
		{
			MethodName: "FetchProducerEnergyResources",
			Handler:    _InventoryManagement_FetchProducerEnergyResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
